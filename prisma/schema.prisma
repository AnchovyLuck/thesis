// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  user       User     @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendorId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  products    Product[]
  article     Article[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  slug        String    @unique
  logoUrl     String?
  description String?
  isActive    Boolean
  products    Product[] 
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  imageUrl        String?
  productImages   String[]
  description     String
  isActive        Boolean
  isWholeSale     Boolean
  sku             String
  barcode         String
  productCode     String?
  unit            String?
  productPrice    Float
  wholeSalePrice  Float
  wholeSaleQty    Int
  productStock    Int
  qty             Int
  salePrice       Float
  tags            String[]
  category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId      String         @db.ObjectId
  brand           Brand?         @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId         String?        @db.ObjectId
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String         @db.ObjectId
  orderItems      OrderItem[]
  farmerProfile   FarmerProfile? @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?        @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Sale            Sale[]
}

model Staff {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  staffId         String
  birthday        DateTime
  password        String
  email           String
  phone           String
  physicalAddress String
  notes           String?
  code            String
  isActive        Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Article {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  imageUrl    String?
  description String?
  content     String?
  isActive    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  USER
  FARMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  userName          String?
  email             String?        @unique
  password          String
  emailVerified     Boolean        @default(false)
  role              UserRole       @default(USER)
  verificationToken String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  farmerProfile     FarmerProfile?
  products          Product[]
  coupons           Coupon[]
  userProfile       UserProfile?
  orders            Order[]
  sales             Sale[]
}

model UserProfile {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName     String?
  lastName      String?
  email         String?
  phone         String?
  streetAddress String?
  ward          String?
  district      String?
  province      String?
  zipCode       String?
  dateOfBirth   DateTime?
  profileImage  String?
}

model FarmerProfile {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String?
  lastName        String?
  phone           String?
  physicalAddress String?
  profileImageUrl String?
  notes           String?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String    @unique @db.ObjectId
  code            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  Product         Product[]
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  firstName     String
  lastName      String
  email         String
  phone         String
  streetAddress String
  ward          String
  district      String
  province      String
  zipCode       String
  shippingCost  Float
  paymentMethod String
  orderItems    OrderItem[]
  orderStatus   OrderStatus @default(PROCESSING)
  orderNumber   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  Sale          Sale[]
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  vendorId  String   @db.ObjectId
  imageUrl  String?
  title     String?
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Sale {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String   @db.ObjectId
  productId    String   @db.ObjectId
  vendorId     String   @db.ObjectId
  total        Float
  productTitle String
  productImage String
  productPrice Float
  productQty   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id])
  product      Product  @relation(fields: [productId], references: [id])
  vendor       User     @relation(fields: [vendorId], references: [id])
}
