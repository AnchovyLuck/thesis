// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String
  expiryDate DateTime
  isActive   Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String
  imageUrl  String
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  description String?
  isActive    Boolean
  products    Product[]
  Article     Article[]
  brands      Brand[]   @relation(fields: [brandIds], references: [id])
  brandIds    String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String     @unique
  slug        String     @unique
  logoUrl     String?
  description String?
  isActive    Boolean
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String         @unique
  imageUrl        String?
  description     String
  isActive        Boolean
  isWholeSale     Boolean
  sku             String
  barcode         String
  productCode     String?
  unit            String?
  productPrice    Float
  wholeSalePrice  Float
  wholeSaleQty    Int
  productStock    Int
  qty             Int
  salePrice       Float
  tags            String[]
  category        Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId      String         @db.ObjectId
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String         @db.ObjectId
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  FarmerProfile   FarmerProfile? @relation(fields: [farmerProfileId], references: [id])
  farmerProfileId String?        @db.ObjectId
}

model Staff {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  staffId         String
  birthday        DateTime
  password        String
  email           String
  phone           String
  physicalAddress String
  notes           String?
  code            String
  isActive        Boolean
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Article {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String    @db.ObjectId
  imageUrl    String?
  description String?
  content     String?
  isActive    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum UserRole {
  ADMIN
  USER
  FARMER
  MODERATOR
}

model User {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  userName          String?
  email             String?        @unique
  password          String?
  emailVerified     Boolean        @default(false)
  products           Product[]
  role              UserRole       @default(USER)
  verificationToken String?
  farmerProfile     FarmerProfile?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userProfile       UserProfile?
}

model UserProfile {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  dateOfBirth DateTime?
  address     String?
}

model FarmerProfile {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userName           String
  phone              String
  email              String
  physicalAddress    String
  contactPerson      String?
  contactPersonPhone String?
  profileImageUrl    String?
  terms              String?
  notes              String?
  isActive           Boolean
  products           String[]
  landSize           Float
  mainCrop           String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String    @unique @db.ObjectId
  code               String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  Product            Product[]
}
